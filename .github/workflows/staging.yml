name: Deploy and CICD
on:
  push:
    branches: [main]

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      
      - name: Deploy Dotnet app
        uses: appleboy/ssh-action@v0.1.2
        with:
          host: ${{secrets.SSH_HOST}} # IP address of the server you wish to ssh into
          key: ${{secrets.SSH_KEY}} # Private or public key of the server
          username: ${{secrets.SSH_USERNAME}} # User of the server you want to ssh into
     
          script: |
            mkdir test 
            cd test 
            git clone git@github.com:EuchiMano/AirplaneMs.git 
            echo 'Deployment successful to digital ocean'





jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    - name: Setup .NET
      uses: actions/setup-dotnet@v2
      with:
        dotnet-version: 6.0.x
    - name: Restore dependencies
      run: dotnet restore
    - name: Build
      run: dotnet build --no-restore
    - name: Test
      run: dotnet test --no-build --verbosity normal

  staging:
    needs: build
    runs-on: ubuntu-latest

    steps:
      - name: Configure SSH
        env:
          SSH_KEY: ${{secrets.SSH_KEY}}
          SSH_HOST: ${{secrets.SSH_HOST}}
          SSH_USER: ${{secrets.SSH_USERNAME}}
        run: |
          mkdir -p ~/.ssh/
          echo "$SSH_KEY" > ~/.ssh/staging.key
          chmod 600 ~/.ssh/staging.key
          cat >>~/.ssh/config <<END
            Host staging
              HostName $SSH_HOST
              User $SSH_USER
              IdentityFile ~/.ssh/staging.key
              StrictHostKeyChecking no
          END
      - name: Stop the server
        run: ssh staging 'sudo systemctl stop AirplaneMs.service'

      - name: Do deploy
        run: ssh staging 'cd /var/www/AirplaneMs-app && bash deploy.sh'
        
      - name: Start the server
        if: ${{ always() }}
        run: ssh staging 'sudo systemctl start AirplaneMs.service'
